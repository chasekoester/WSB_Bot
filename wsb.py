# -*- coding: utf-8 -*-
"""WSB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11jDapXXC3fsbzLvnWS3JRnTijqnjF_FN
"""


import asyncpraw
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
import re
import pandas as pd
from collections import Counter
import asyncio

# Initialize VADER sentiment intensity analyzer
analyzer = SentimentIntensityAnalyzer()

# Set up Async Reddit API client (replace with your credentials)
reddit = asyncpraw.Reddit(
    client_id="472uqF3E2CIwM8UJUENJsw",  # Replace with your actual client ID
    client_secret="9B9RyXBTrNlkYdYSO3s1exKY2jIjFg",  # Replace with your actual client secret
    user_agent="WSB Bot by YourName"  # You can set this to anything
)

# Load the list of stock tickers (you should have a file named 'tickers.csv' with valid stock tickers)
ticker_list = pd.read_csv("SP500.csv")["Symbol"].tolist()  # Ensure this CSV is properly formatted
tickers = set(ticker_list)

# Function to extract tickers from a post's title and body
def extract_tickers(text):
    words = re.findall(r"\b[A-Z]{2,5}\b", text)  # Matches uppercase words (potential stock tickers)
    return [word for word in words if word in tickers]

# Function to analyze sentiment of a given text
def analyze_sentiment_vader(text):
    score = analyzer.polarity_scores(text)
    return score  # Returns the sentiment score (positive, neutral, negative, compound)

async def fetch_posts():
    subreddit = await reddit.subreddit("wallstreetbets")
    posts = []
    async for post in subreddit.new(limit=1000):  # You can adjust the limit to 100 or more
        posts.append({"title": post.title, "body": post.selftext, "upvotes": post.score})
    return posts

async def analyze_wsb_sentiment():
    posts = await fetch_posts()  # Fetch posts

    # Prepare counters for sentiment and tickers
    ticker_counts = Counter()
    sentiment_scores = {}

    # Loop through each post to analyze sentiment and tickers
    for post in posts:
        # Extract tickers from the post title + body
        tickers_in_post = extract_tickers(post["title"] + " " + post["body"])

        # Analyze sentiment for the post
        sentiment_score = analyze_sentiment_vader(post["title"] + " " + post["body"])["compound"]

        # Update ticker counts
        ticker_counts.update(tickers_in_post)

        # Update sentiment counts for each ticker
        for ticker in tickers_in_post:
            if ticker not in sentiment_scores:
                sentiment_scores[ticker] = {"Positive": 0, "Negative": 0, "Neutral": 0}

            # Classify sentiment based on the compound score
            if sentiment_score > 0.05:
                sentiment_scores[ticker]["Positive"] += 1
            elif sentiment_score < -0.05:
                sentiment_scores[ticker]["Negative"] += 1
            else:
                sentiment_scores[ticker]["Neutral"] += 1

    return ticker_counts, sentiment_scores

async def display_results():
    # Run the sentiment analysis
    ticker_counts, sentiment_scores = await analyze_wsb_sentiment()

    # Display the most common tickers (top 5)
    print("Top 5 Tickers by Mentions:")
    for ticker, count in ticker_counts.most_common(5):
        print(f"{ticker}: {count} mentions")

    # Display sentiment breakdown for each ticker
    print("\nSentiment Breakdown for Top Tickers:")
    for ticker, sentiments in sentiment_scores.items():
        print(f"{ticker}: {sentiments}")

# Run the analysis and display results
# Instead of using asyncio.run(), just await the function directly
await display_results()
